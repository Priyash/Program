#include<iostream>
#include<cstdio>
#include<algorithm>
#include<utility>
#include<vector>
#include<queue>
#include<map>

using namespace std;

bool* visited;
vector<int>*adj;
int n;
class Node
{
	int index;

public:
	Node(int index)
	{
		this->index = index;
	}
	int getIndex(){ return index; }
	
};




pair<int, int> BFS(Node* start, vector<Node*>goal)
{
	for (int i = 0; i < n; i++)
	{
		visited[i] = false;
	}
	queue<pair<int, int>>q;
	q.push(pair<int, int>(start->getIndex(), start->getIndex()));
	visited[start->getIndex()] = true;
	while (!q.empty())
	{
		pair<int, int>cur = q.front(); q.pop();
		for (auto i : goal)
		{
			if (i->getIndex() == cur.second)return cur;
		}

		for (auto i : adj[cur.second])
		{
			if (!visited[i])
			{
				visited[i] = true;
				q.push(pair<int, int>(cur.second, i));
			}
		}
	}
}

void addEdges(int i, int j)
{
	adj[i].push_back(j);
	adj[j].push_back(i);
}

int main()
{
	int n, l, e;
	cin >> n >> l >> e;

	adj = new vector<int>[n];
	vector<Node*>v;
	for (int i = 0; i < l; i++)
	{
		int n1, n2;
		cin >> n1 >> n2;
		addEdges(n1, n2);
	}
	for (int i = 0; i < e; i++)
	{
		int EI;
		cin >> EI;
		v.push_back(new Node(EI));
	}
	
	int SI;
	cin >> SI;
	pair<int, int>p = BFS(new Node(SI), v);
}
